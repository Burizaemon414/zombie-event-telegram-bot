import os
import json
import base64
from datetime import datetime
import gspread
from oauth2client.service_account import ServiceAccountCredentials
import logging

logger = logging.getLogger(__name__)

class SheetManager:
    """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Google Sheets ‡∏´‡∏•‡∏≤‡∏¢‡πÜ sheet ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥"""
    
    def __init__(self):
        self.client = None
        self.spreadsheet = None
        self.current_sheet = None
        self.sheet_index = 1
        self.max_rows_per_sheet = 50000  # ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏ó‡∏µ‡πà 50k ‡πÄ‡∏û‡∏∑‡πà‡∏≠ performance
        self._connect()
    
    def _connect(self):
        """‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Google Sheets"""
        try:
            scope = [
                "https://spreadsheets.google.com/feeds",
                "https://www.googleapis.com/auth/drive"
            ]
            creds_b64 = os.getenv("GOOGLE_CREDS_JSON")
            creds_json_str = base64.b64decode(creds_b64).decode("utf-8")
            credentials_info = json.loads(creds_json_str)
            creds = ServiceAccountCredentials.from_json_keyfile_dict(credentials_info, scope)
            
            self.client = gspread.authorize(creds)
            self.spreadsheet = self.client.open("‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡∏ü‡∏£‡∏µ ‡∏Å‡∏•‡∏∏‡πà‡∏° ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏° ZOMBIE")
            self._check_current_sheet()
            
        except Exception as e:
            logger.error(f"Connection error: {e}")
            raise
    
    def _check_current_sheet(self):
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö sheet ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô"""
        # ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ sheets ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        worksheets = self.spreadsheet.worksheets()
        
        # ‡∏´‡∏≤ sheet ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
        data_sheets = [ws for ws in worksheets if ws.title.startswith("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤")]
        
        if data_sheets:
            # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏° index ‡πÅ‡∏•‡∏∞‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
            latest_sheet = sorted(data_sheets, key=lambda x: self._extract_sheet_number(x.title))[-1]
            self.current_sheet = latest_sheet
            self.sheet_index = self._extract_sheet_number(latest_sheet.title)
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏ï‡πá‡∏°‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
            row_count = len(self.current_sheet.get_all_values())
            if row_count >= self.max_rows_per_sheet:
                self._create_new_sheet()
        else:
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á sheet ‡πÅ‡∏£‡∏Å
            self.current_sheet = self.spreadsheet.worksheet("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤")
            self.sheet_index = 1
    
    def _extract_sheet_number(self, sheet_name):
        """‡∏î‡∏∂‡∏á‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç sheet ‡∏à‡∏≤‡∏Å‡∏ä‡∏∑‡πà‡∏≠"""
        if sheet_name == "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤":
            return 1
        try:
            # Format: "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤_2", "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤_3"
            return int(sheet_name.split("_")[-1])
        except:
            return 1
    
    def _create_new_sheet(self):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á sheet ‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏ï‡πá‡∏°"""
        try:
            self.sheet_index += 1
            new_sheet_name = f"‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤_{self.sheet_index}"
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á sheet ‡πÉ‡∏´‡∏°‡πà
            new_sheet = self.spreadsheet.add_worksheet(
                title=new_sheet_name,
                rows=self.max_rows_per_sheet + 1000,  # ‡πÄ‡∏ú‡∏∑‡πà‡∏≠ buffer
                cols=20
            )
            
            # ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å header ‡∏à‡∏≤‡∏Å sheet ‡πÄ‡∏î‡∏¥‡∏°
            headers = self.current_sheet.row_values(1)
            new_sheet.update('A1:T1', [headers])
            
            # Format header
            new_sheet.format('A1:T1', {
                "backgroundColor": {"red": 0.2, "green": 0.6, "blue": 0.9},
                "textFormat": {"bold": True, "foregroundColor": {"red": 1, "green": 1, "blue": 1}}
            })
            
            self.current_sheet = new_sheet
            logger.info(f"‚úÖ Created new sheet: {new_sheet_name}")
            
            # ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô admin
            self._notify_admin_new_sheet(new_sheet_name)
            
        except Exception as e:
            logger.error(f"Error creating new sheet: {e}")
            raise
    
    def _notify_admin_new_sheet(self, sheet_name):
        """‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô admin ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á sheet ‡πÉ‡∏´‡∏°‡πà"""
        # TODO: ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ú‡πà‡∏≤‡∏ô Telegram
        logger.info(f"üì¢ Notification: New sheet created - {sheet_name}")
    
    def append_row(self, data):
        """‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö sheet ‡πÄ‡∏ï‡πá‡∏°"""
        try:
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏ñ‡∏ß‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
            current_rows = len(self.current_sheet.get_all_values())
            
            if current_rows >= self.max_rows_per_sheet:
                logger.info(f"‚ö†Ô∏è Sheet {self.current_sheet.title} is full ({current_rows} rows)")
                self._create_new_sheet()
            
            # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            self.current_sheet.append_row(data)
            logger.info(f"‚úÖ Added data to {self.current_sheet.title} (row {current_rows + 1})")
            
            return True
            
        except Exception as e:
            logger.error(f"Error appending row: {e}")
            return False
    
    def search_user(self, user_id):
        """‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ user ‡∏à‡∏≤‡∏Å‡∏ó‡∏∏‡∏Å sheets"""
        try:
            worksheets = self.spreadsheet.worksheets()
            data_sheets = [ws for ws in worksheets if ws.title.startswith("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤")]
            
            results = []
            
            for sheet in data_sheets:
                try:
                    # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÉ‡∏ô column I (user_id)
                    cell_list = sheet.findall(str(user_id))
                    for cell in cell_list:
                        row_data = sheet.row_values(cell.row)
                        results.append({
                            'sheet': sheet.title,
                            'row': cell.row,
                            'data': row_data
                        })
                except Exception as e:
                    logger.error(f"Error searching in {sheet.title}: {e}")
            
            return results
            
        except Exception as e:
            logger.error(f"Error searching user: {e}")
            return []
    
    def get_statistics(self):
        """‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô"""
        try:
            worksheets = self.spreadsheet.worksheets()
            data_sheets = [ws for ws in worksheets if ws.title.startswith("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤")]
            
            stats = {
                'total_sheets': len(data_sheets),
                'sheets': []
            }
            
            total_users = 0
            
            for sheet in data_sheets:
                row_count = len(sheet.get_all_values()) - 1  # ‡πÑ‡∏°‡πà‡∏ô‡∏±‡∏ö header
                total_users += row_count
                
                stats['sheets'].append({
                    'name': sheet.title,
                    'users': row_count,
                    'capacity': f"{(row_count/self.max_rows_per_sheet)*100:.1f}%"
                })
            
            stats['total_users'] = total_users
            stats['current_sheet'] = self.current_sheet.title
            
            return stats
            
        except Exception as e:
            logger.error(f"Error getting statistics: {e}")
            return None