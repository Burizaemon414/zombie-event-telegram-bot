import os
import json
import base64
from datetime import datetime
from threading import Thread
from flask import Flask, request, redirect
from flask_cors import CORS

from dotenv import load_dotenv
load_dotenv()

from telegram import (
    Update,
    ReplyKeyboardMarkup,
    KeyboardButton,
    InlineKeyboardButton,
    InlineKeyboardMarkup
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    ConversationHandler
)

import gspread
from oauth2client.service_account import ServiceAccountCredentials

# ====== Google Sheet Setup ======
scope = [
    "https://spreadsheets.google.com/feeds",
    "https://www.googleapis.com/auth/drive"
]
creds_b64 = os.getenv("GOOGLE_CREDS_JSON")
if not creds_b64:
    raise ValueError("Environment variable GOOGLE_CREDS_JSON not found")

creds_json_str = base64.b64decode(creds_b64).decode("utf-8")
credentials_info = json.loads(creds_json_str)
creds = ServiceAccountCredentials.from_json_keyfile_dict(credentials_info, scope)
client = gspread.authorize(creds)
sheet = client.open("‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡∏ü‡∏£‡∏µ ‡∏Å‡∏•‡∏∏‡πà‡∏° ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏° ZOMBIE").worksheet("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤")

# ====== Bot Config ======
ASK_INFO = range(1)
GROUP_ID = -1002561643127  # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô group id ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì

def build_redirect_url(house_key, user_id):
    return f"https://zombie-event-telegram-bot.onrender.com/go?house={house_key}&uid={user_id}"

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    welcome_message = (
        "üéâ ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô ZOMBIE SLOT - ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏° \n\n"
        "üìå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡πä‡∏≠‡∏õ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏ï‡∏¥‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ó‡∏∏‡∏Å‡∏ä‡πà‡∏≠‡∏á \n\n"
        "‡∏ä‡∏∑‡πà‡∏≠ - ‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏• : \n"
        "‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£ : \n"
        "‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£ : \n"
        "‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ç‡∏ä‡∏µ : \n"
        "‡∏≠‡∏µ‡πÄ‡∏°‡∏• : \n"
        "‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏ó‡πÄ‡∏•‡πÅ‡∏Å‡∏£‡∏° : \n"
        "@username Telegram :"
    )
    keyboard = [[KeyboardButton("‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‚úÖ")]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(welcome_message, reply_markup=reply_markup)
    return ASK_INFO

async def get_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    data = {}

    if text.count(":") < 5:
        await update.message.reply_text("‚ùó ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ó‡∏∏‡∏Å‡∏ä‡πà‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á")
        return ASK_INFO

    for line in text.strip().splitlines():
        if ':' in line:
            key, value = map(str.strip, line.split(':', 1))
            data[key.lower()] = value

    if any(not v for v in data.values()):
        await update.message.reply_text("‚ùó ‡∏ö‡∏≤‡∏á‡∏ä‡πà‡∏≠‡∏á‡πÄ‡∏ß‡πâ‡∏ô‡∏ß‡πà‡∏≤‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ó‡∏∏‡∏Å‡∏ä‡πà‡∏≠‡∏á")
        return ASK_INFO

    user = update.message.from_user
    user_id = user.id
    username = user.username or "‡πÑ‡∏°‡πà‡∏°‡∏µ"

    try:
        member = await context.bot.get_chat_member(chat_id=GROUP_ID, user_id=user_id)
        in_group = member.status in ['member', 'administrator', 'creator']
    except:
        in_group = False

    status_text = "‚úÖ ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÅ‡∏•‡πâ‡∏ß" if in_group else "‚ùå ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏•‡∏∏‡πà‡∏°"
    
    # ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤ Bangkok timezone
    import pytz
    bangkok_tz = pytz.timezone('Asia/Bangkok')
    now = datetime.now(bangkok_tz).strftime("%Y-%m-%d %H:%M:%S")

    house_keys = [
        ("üíÄ ZOMBIE XO", "ZOMBIE_XO"),
        ("üëæ ZOMBIE PG", "ZOMBIE_PG"),
        ("üëë ZOMBIE KING", "ZOMBIE_KING"),
        ("üßü ZOMBIE ALL", "ZOMBIE_ALL"),
        ("üê¢ GENBU88", "GENBU88")
    ]

    confirm_message = (
        f"‚úÖ ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì üôèüèª {data.get('‡∏ä‡∏∑‡πà‡∏≠ - ‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•', '‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ')} ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô \n\n"
        f"‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: {status_text}\n"
        "üëë *‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ:* \n"
        "1Ô∏è‚É£ ‡πÅ‡∏Ñ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡∏µ‡πâ \n"
        "2Ô∏è‚É£ ‡πÅ‡∏≠‡∏î‡πÑ‡∏•‡∏ô‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏à‡πâ‡∏á‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏£‡∏±‡∏ö‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡∏ü‡∏£‡∏µ \n\n"
        "‚ö†Ô∏è *‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡∏ü‡∏£‡∏µ‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ú‡∏π‡πâ‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏ï‡∏≤‡∏°‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Ñ‡∏£‡∏ö‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô*"
    )

    keyboard = [
        [InlineKeyboardButton(text, url=build_redirect_url(house_key, user_id))
         for text, house_key in house_keys[:2]],
        [InlineKeyboardButton(text, url=build_redirect_url(house_key, user_id))
         for text, house_key in house_keys[2:4]],
        [InlineKeyboardButton(house_keys[4][0], url=build_redirect_url(house_keys[4][1], user_id))]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏ñ‡∏ß‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á (‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà)
    sheet.append_row([
        data.get("‡∏ä‡∏∑‡πà‡∏≠ - ‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•", ""),
        data.get("‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£", ""),
        data.get("‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£", ""),
        data.get("‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ç‡∏ä‡∏µ", ""),
        data.get("‡∏≠‡∏µ‡πÄ‡∏°‡∏•", ""),
        data.get("‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏ó‡πÄ‡∏•‡πÅ‡∏Å‡∏£‡∏°", ""),
        data.get("@username telegram", ""),
        username,
        str(user_id),
        status_text,
        now,
        "PENDING",  # ‡∏ö‡πâ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡∏ü‡∏£‡∏µ (‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏õ‡πá‡∏ô PENDING)
        ""  # ‡∏ö‡πâ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏¢‡∏Å‡∏î‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡∏î‡∏π
    ])

    await update.message.reply_text(confirm_message, parse_mode="Markdown", reply_markup=reply_markup)
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô‡πÅ‡∏•‡πâ‡∏ß")
    return ConversationHandler.END

# ====== Flask App ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö log_click ======
flask_app = Flask(__name__)
CORS(flask_app)

@flask_app.route("/go")
def go():
    """Route ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö redirect ‡πÅ‡∏•‡∏∞‡πÄ‡∏Å‡πá‡∏ö log ‡∏Å‡∏≤‡∏£‡∏Ñ‡∏•‡∏¥‡∏Å"""
    LINE_HOUSE_LINKS = {
        "ZOMBIE_XO": "https://lin.ee/SgguCbJ",
        "ZOMBIE_PG": "https://lin.ee/ETELgrN",
        "ZOMBIE_KING": "https://lin.ee/fJilKIf",
        "ZOMBIE_ALL": "https://lin.ee/9eogsb8e",
        "GENBU88": "https://lin.ee/JCCXt06"
    }
    
    house = request.args.get("house", "").upper()
    uid = request.args.get("uid")
    
    if not house or not uid:
        return "Missing parameters", 400
    
    link = LINE_HOUSE_LINKS.get(house)
    if not link:
        return f"Unknown house: {house}", 400
    
    # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡∏•‡∏¥‡∏Å‡∏•‡∏á Google Sheet
    import pytz
    bangkok_tz = pytz.timezone('Asia/Bangkok')
    now = datetime.now(bangkok_tz).strftime("%Y-%m-%d %H:%M:%S")
    
    try:
        # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ user_id ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô sheet
        all_cells = sheet.findall(str(uid))
        if all_cells:
            # ‡∏´‡∏≤‡πÅ‡∏ñ‡∏ß‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
            last_cell = all_cells[-1]
            last_row = last_cell.row
            print(f"‚úÖ ‡∏û‡∏ö user_id {uid} ‡∏ó‡∏µ‡πà‡πÅ‡∏ñ‡∏ß {last_row} (‡πÅ‡∏ñ‡∏ß‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î)")
            
            # ‡∏£‡∏ß‡∏ö‡∏£‡∏ß‡∏°‡∏ö‡πâ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏¢‡∏Å‡∏î‡∏à‡∏≤‡∏Å‡πÅ‡∏ñ‡∏ß‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤ (‡πÑ‡∏°‡πà‡∏£‡∏ß‡∏°‡πÅ‡∏ñ‡∏ß‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô)
            all_houses = []
            
            # ‡∏î‡∏∂‡∏á‡∏ö‡πâ‡∏≤‡∏ô‡∏à‡∏≤‡∏Å‡πÅ‡∏ñ‡∏ß‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
            for i, cell in enumerate(all_cells[:-1]):  # ‡πÑ‡∏°‡πà‡∏£‡∏ß‡∏°‡πÅ‡∏ñ‡∏ß‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
                row = cell.row
                # ‡∏ö‡πâ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡∏ü‡∏£‡∏µ (‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå 12)
                house_credit = sheet.cell(row, 12).value
                if house_credit and house_credit != "PENDING" and house_credit not in all_houses:
                    all_houses.append(house_credit)
            
            # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡πâ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏î‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ô‡∏µ‡πâ
            if house not in all_houses:
                all_houses.append(house)
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á string ‡∏Ç‡∏≠‡∏á‡∏ö‡πâ‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
            all_houses_str = ",".join(all_houses)
            
            # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏ö‡πâ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡∏ü‡∏£‡∏µ (‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå 12)
            current_house = sheet.cell(last_row, 12).value
            if current_house == "PENDING":
                sheet.update_cell(last_row, 12, house)
                print(f"üè† ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏ö‡πâ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡∏ü‡∏£‡∏µ: {house}")
            
            # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ö‡πâ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏¢‡∏Å‡∏î‡∏™‡∏∞‡∏™‡∏° (‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå 13)
            sheet.update_cell(last_row, 13, all_houses_str)
            print(f"üìù ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ö‡πâ‡∏≤‡∏ô‡∏™‡∏∞‡∏™‡∏°: {all_houses_str}")
            
        else:
            print(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö user_id {uid} ‡πÉ‡∏ô‡∏ä‡∏µ‡∏ï")
            
    except Exception as e:
        print(f"‚ùå Error updating sheet: {e}")
    
    # Redirect ‡πÑ‡∏õ LINE
    print(f"‚ÜóÔ∏è Redirect {uid} ‡πÑ‡∏õ‡∏¢‡∏±‡∏á {house}: {link}")
    return redirect(link, code=302)

@flask_app.route("/log_click", methods=["POST"])
def log_click():
    try:
        data = request.get_json()
        print("üì• ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Worker:", data)

        house = data.get("house", "").upper()
        user_id = str(data.get("uid"))
        time = data.get("time", datetime.utcnow().isoformat())

        if not house or not user_id:
            print("‚ö†Ô∏è house ‡∏´‡∏£‡∏∑‡∏≠ uid ‡∏´‡∏≤‡∏¢‡πÑ‡∏õ")
            return 'invalid', 400

        try:
            cell = sheet.find(user_id)
        except Exception as e:
            print(f"‚ùå ‡∏´‡∏≤ user_id {user_id} ‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡πÉ‡∏ô‡∏ä‡∏µ‡∏ï")
            return 'not found', 404

        row = cell.row
        print(f"‚úÖ ‡πÄ‡∏à‡∏≠ user_id ‡∏ó‡∏µ‡πà row {row}")

        sheet.update_cell(row, 12, house)
        print(f"üè† ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå L (12): {house}")

        current = sheet.cell(row, 13).value or ""
        if house not in current:
            updated = f"{current},{house}" if current else house
            sheet.update_cell(row, 13, updated)
            print(f"üß© ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡πâ‡∏≤‡∏ô {house} ‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå M (13): {updated}")
        else:
            print(f"üîÅ ‡∏ö‡πâ‡∏≤‡∏ô {house} ‡πÄ‡∏Ñ‡∏¢‡∏Å‡∏î‡πÅ‡∏•‡πâ‡∏ß ‡πÑ‡∏°‡πà‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ã‡πâ‡∏≥")

        return '', 204

    except Exception as e:
        print("‚ùå ERROR ‡πÉ‡∏ô log_click:", e)
        return 'error', 500

# ====== Main function ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Render ======
if __name__ == "__main__":
    # Initialize bot
    bot_token = os.getenv("BOT_TOKEN")
    if not bot_token:
        raise ValueError("Environment variable BOT_TOKEN not found")

    app = ApplicationBuilder().token(bot_token).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={ASK_INFO: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_info)]},
        fallbacks=[CommandHandler("cancel", cancel)]
    )
    app.add_handler(conv_handler)

    # Start Flask in a separate thread
    flask_thread = Thread(target=lambda: flask_app.run(host="0.0.0.0", port=10000))
    flask_thread.daemon = True
    flask_thread.start()

    # Start bot
    print("ü§ñ Bot is starting...")
    app.run_polling(drop_pending_updates=True)