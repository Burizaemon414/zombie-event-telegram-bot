
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    ConversationHandler
)
import gspread
from oauth2client.service_account import ServiceAccountCredentials
import re
from datetime import datetime

# Google Sheet Setup
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
import os

# ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå credentials.json ‡∏à‡∏≤‡∏Å Environment Variable
if not os.path.exists("credentials.json"):
    with open("credentials.json", "w") as f:
        f.write(os.getenv("GOOGLE_CREDS_JSON"))
creds = ServiceAccountCredentials.from_json_keyfile_name("credentials.json", scope)
client = gspread.authorize(creds)
sheet = client.open("‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡∏ü‡∏£‡∏µ ‡∏Å‡∏•‡∏∏‡πà‡∏° ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏° ZOMBIE").sheet1

ASK_INFO = range(1)
GROUP_ID = -1002561643127  # ‡∏Å‡∏•‡∏∏‡πà‡∏° ZOMBIE

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    welcome_message = (
        "üéâ ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô ZOMBIE SLOT - ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°\n\n"
        "üìå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° ‡πÄ‡∏ä‡πà‡∏ô:\n\n"
        "‡∏ä‡∏∑‡πà‡∏≠ ‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•\n‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£\n‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£\n‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ç‡∏ä‡∏µ\n‡∏≠‡∏µ‡πÄ‡∏°‡∏•\n‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏ó‡πÄ‡∏•‡πÅ‡∏Å‡∏£‡∏°\n@username"
    )
    keyboard = [[KeyboardButton("‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‚úÖ")]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(welcome_message, reply_markup=reply_markup)
    return ASK_INFO

async def get_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    lines = [line.strip() for line in text.strip().splitlines() if line.strip()]

    name = phone = bank = account = email = tg_name = tg_user = ""

    if len(lines) >= 1:
        name = lines[0]

    for line in lines:
        if line.startswith("‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏ó‡πÄ‡∏•‡πÅ‡∏Å‡∏£‡∏°"):
            tg_name = line.replace("‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏ó‡πÄ‡∏•‡πÅ‡∏Å‡∏£‡∏°", "").strip()
        elif line.startswith("‡∏¢‡∏π‡∏™‡πÄ‡∏ã‡∏≠‡∏£‡πå‡πÄ‡∏ó‡πÄ‡∏•‡πÅ‡∏Å‡∏£‡∏°"):
            tg_user = line.replace("‡∏¢‡∏π‡∏™‡πÄ‡∏ã‡∏≠‡∏£‡πå‡πÄ‡∏ó‡πÄ‡∏•‡πÅ‡∏Å‡∏£‡∏°", "").strip()
        elif line.startswith("@") and not tg_user:
            tg_user = line.strip()
        elif line.isdigit() and len(line) >= 9:
            if not phone:
                phone = line
            else:
                account = line
        elif "@" in line:
            match = re.search(r"[\w.-]+@[\w.-]+\.\w+", line)
            if match:
                email = match.group()
        elif any(b in line for b in ["‡πÑ‡∏ó‡∏¢‡∏û‡∏≤‡∏ì‡∏¥‡∏ä‡∏¢‡πå", "‡∏Å‡∏™‡∏¥‡∏Å‡∏£", "‡∏Å‡∏£‡∏∏‡∏á‡∏®‡∏£‡∏µ", "‡∏Å‡∏£‡∏∏‡∏á‡πÑ‡∏ó‡∏¢", "‡∏ó‡∏´‡∏≤‡∏£‡πÑ‡∏ó‡∏¢", "‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£"]):
            bank = line

    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡∏£‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    required_fields = [name, phone, bank, account, email, tg_user]
    if any(not field for field in required_fields):
        await update.message.reply_text(
            "‚ùó ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á\n"
            "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡πÑ‡∏î‡πâ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ñ‡∏£‡∏ö‡∏ó‡∏∏‡∏Å‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ï‡∏≤‡∏°‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏‡πÑ‡∏ß‡πâ\n\n"
            "‡πÄ‡∏ä‡πà‡∏ô:\n‡∏ä‡∏∑‡πà‡∏≠ ‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•\n‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£\n‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£\n‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ç‡∏ä‡∏µ\n‡∏≠‡∏µ‡πÄ‡∏°‡∏•\n‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏ó‡πÄ‡∏•‡πÅ‡∏Å‡∏£‡∏°\n@username"
        )
        return ASK_INFO

    user = update.message.from_user
    user_id = user.id
    username = user.username or "‡πÑ‡∏°‡πà‡∏°‡∏µ"

    try:
        member = await context.bot.get_chat_member(chat_id=GROUP_ID, user_id=user_id)
        in_group = member.status in ['member', 'administrator', 'creator']
    except:
        in_group = False

    status_text = "‚úÖ ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÅ‡∏•‡πâ‡∏ß" if in_group else "‚ùå ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏•‡∏∏‡πà‡∏°"
    now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    # Save to Google Sheet
    sheet.append_row([name, phone, bank, account, email, tg_name, tg_user, username, str(user_id), status_text, now])

    confirm_message = (
        f"‚úÖ ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì üôèüèª {name} ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô\n"
        f"‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: {status_text}\n\n"
        "üëë *‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ:*\n"
        "1Ô∏è‚É£ ‡πÅ‡∏Ñ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡∏µ‡πâ\n"
        "2Ô∏è‚É£ ‡πÅ‡∏≠‡∏î‡πÑ‡∏•‡∏ô‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏à‡πâ‡∏á‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô\n"
        "‚ö†Ô∏è *‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡∏ü‡∏£‡∏µ‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ú‡∏π‡πâ‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏ï‡∏≤‡∏°‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Ñ‡∏£‡∏ö‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô*"
    )

    keyboard = [
        [
            InlineKeyboardButton("üíÄ ZOMBIE XO", url="https://lin.ee/SgguCbJ"),
            InlineKeyboardButton("üëæ ZOMBIE PG", url="https://lin.ee/ETELgrN")
        ],
        [
            InlineKeyboardButton("üëë ZOMBIE KING", url="https://lin.ee/fJilKIf"),
            InlineKeyboardButton("üßü ZOMBIE ALL", url="https://lin.ee/9eogsb8e")
        ],
        [
            InlineKeyboardButton("üê¢ GENBU88", url="https://lin.ee/JCCXt06")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(confirm_message, parse_mode="Markdown", reply_markup=reply_markup)
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô‡πÅ‡∏•‡πâ‡∏ß")
    return ConversationHandler.END

# Build Application
app = ApplicationBuilder().token("8137922853:AAFEuJXVf_REm2tSF7kkruVVBEQaj87PU-Y").build()

conv_handler = ConversationHandler(
    entry_points=[CommandHandler("start", start)],
    states={ASK_INFO: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_info)]},
    fallbacks=[CommandHandler("cancel", cancel)],
)

app.add_handler(conv_handler)
app.run_polling()
