from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup, Bot
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    ConversationHandler
)
import gspread
from oauth2client.service_account import ServiceAccountCredentials
import re
from datetime import datetime
import os
import json
import base64
import asyncio
import sys

# ====== Configuration ======
ASK_INFO = range(1)
GROUP_ID = -1002561643127

# ====== Google Sheet Setup ======
def setup_google_sheets():
    """Setup Google Sheets connection"""
    scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
    
    # ‡∏•‡∏≠‡∏á‡∏´‡∏≤ credentials ‡∏à‡∏≤‡∏Å environment variable ‡∏Å‡πà‡∏≠‡∏ô
    creds_b64 = os.getenv("GOOGLE_CREDS_JSON")
    
    if creds_b64:
        print("üìä ‡πÉ‡∏ä‡πâ Google credentials ‡∏à‡∏≤‡∏Å environment variable")
        try:
            creds_json_str = base64.b64decode(creds_b64).decode("utf-8")
            credentials_info = json.loads(creds_json_str)
        except Exception as e:
            print(f"‚ùå Error decoding credentials: {e}")
            sys.exit(1)
    else:
        # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ environment variable ‡πÉ‡∏´‡πâ‡∏´‡∏≤‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå
        print("üìä ‡πÉ‡∏ä‡πâ Google credentials ‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå")
        creds_file = "GOOGLE_CREDS_JSON.json"
        
        if not os.path.exists(creds_file):
            print(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå {creds_file}")
            print("‚ùó ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ß‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå credentials ‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ GOOGLE_CREDS_JSON environment variable")
            sys.exit(1)
        
        with open(creds_file, 'r') as f:
            credentials_info = json.load(f)
    
    try:
        creds = ServiceAccountCredentials.from_json_keyfile_dict(credentials_info, scope)
        client = gspread.authorize(creds)
        sheet = client.open("‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡∏ü‡∏£‡∏µ ‡∏Å‡∏•‡∏∏‡πà‡∏° ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏° ZOMBIE").sheet1
        print("‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Google Sheets ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
        return sheet
    except Exception as e:
        print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Google Sheets: {e}")
        sys.exit(1)

# Setup Google Sheets
sheet = setup_google_sheets()

# ====== Bot Token ======
BOT_TOKEN = os.getenv("BOT_TOKEN", "8137922853:AAFEuJXVf_REm2tSF7kkruVVBEQaj87PU-Y")

# ====== Bot Handlers ======
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Start command handler"""
    welcome_message = (
        "üéâ ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô ZOMBIE SLOT - ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°\n\n"
        "üìå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡πä‡∏≠‡∏õ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏ï‡∏¥‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ó‡∏∏‡∏Å‡∏ä‡πà‡∏≠‡∏á:\n\n"
        "‡∏ä‡∏∑‡πà‡∏≠ - ‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏• : \n"
        "‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£ : \n"
        "‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£ : \n"
        "‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ç‡∏ä‡∏µ : \n"
        "‡∏≠‡∏µ‡πÄ‡∏°‡∏• : \n"
        "‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏ó‡πÄ‡∏•‡πÅ‡∏Å‡∏£‡∏° : \n"
        "@username Telegram : "
    )
    keyboard = [[KeyboardButton("‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‚úÖ")]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await update.message.reply_text(welcome_message, reply_markup=reply_markup)
    return ASK_INFO

async def get_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle user information input"""
    text = update.message.text
    
    # ‡∏ñ‡πâ‡∏≤‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° "‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‚úÖ"
    if text == "‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‚úÖ":
        await update.message.reply_text(
            "üìù ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡πÄ‡∏ï‡∏¥‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö:\n\n"
            "‡∏ä‡∏∑‡πà‡∏≠ - ‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏• : \n"
            "‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£ : \n"
            "‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£ : \n"
            "‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ç‡∏ä‡∏µ : \n"
            "‡∏≠‡∏µ‡πÄ‡∏°‡∏• : \n"
            "‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏ó‡πÄ‡∏•‡πÅ‡∏Å‡∏£‡∏° : \n"
            "@username Telegram : "
        )
        return ASK_INFO
    
    # Parse user data
    data = {}
    for line in text.strip().splitlines():
        if ':' in line:
            key, value = map(str.strip, line.split(':', 1))
            data[key.lower()] = value
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    required_fields = [
        "‡∏ä‡∏∑‡πà‡∏≠ - ‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•",
        "‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£",
        "‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£",
        "‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ç‡∏ä‡∏µ",
        "‡∏≠‡∏µ‡πÄ‡∏°‡∏•",
        "‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏ó‡πÄ‡∏•‡πÅ‡∏Å‡∏£‡∏°",
        "@username telegram"
    ]
    
    missing_fields = []
    for field in required_fields:
        if not data.get(field.lower(), "").strip():
            missing_fields.append(field)
    
    if missing_fields:
        await update.message.reply_text(
            f"‚ùó ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏ï‡∏¥‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏ô‡∏µ‡πâ:\n"
            f"{', '.join(missing_fields)}\n\n"
            "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡πÄ‡∏ï‡∏¥‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ó‡∏∏‡∏Å‡∏ä‡πà‡∏≠‡∏á"
        )
        return ASK_INFO
    
    # Get user info
    user = update.message.from_user
    user_id = user.id
    username = user.username or "‡πÑ‡∏°‡πà‡∏°‡∏µ"
    
    # Check group membership
    try:
        member = await context.bot.get_chat_member(chat_id=GROUP_ID, user_id=user_id)
        in_group = member.status in ['member', 'administrator', 'creator']
    except Exception as e:
        print(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏•‡∏∏‡πà‡∏°: {e}")
        in_group = False
    
    status_text = "‚úÖ ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÅ‡∏•‡πâ‡∏ß" if in_group else "‚ùå ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏•‡∏∏‡πà‡∏°"
    now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    
    # Save to Google Sheets
    try:
        sheet.append_row([
            data.get("‡∏ä‡∏∑‡πà‡∏≠ - ‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•", ""),
            data.get("‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£", ""),
            data.get("‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£", ""),
            data.get("‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ç‡∏ä‡∏µ", ""),
            data.get("‡∏≠‡∏µ‡πÄ‡∏°‡∏•", ""),
            data.get("‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏ó‡πÄ‡∏•‡πÅ‡∏Å‡∏£‡∏°", ""),
            data.get("@username telegram", ""),
            f"@{username}" if username != "‡πÑ‡∏°‡πà‡∏°‡∏µ" else "‡πÑ‡∏°‡πà‡∏°‡∏µ",
            str(user_id),
            status_text,
            now
        ])
        print(f"‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á {user_id} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
    except Exception as e:
        print(f"‚ùå Error saving to Google Sheets: {e}")
        await update.message.reply_text(
            "‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•\n"
            "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô"
        )
        return ConversationHandler.END
    
    # Send confirmation message
    confirm_message = (
        f"‚úÖ ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì üôèüèª {data.get('‡∏ä‡∏∑‡πà‡∏≠ - ‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•', '‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ')} ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô \n"
        f"‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: {status_text}\n\n"
        "üëë *‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ:*\n"
        "1Ô∏è‚É£ ‡πÅ‡∏Ñ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡∏µ‡πâ\n"
        "2Ô∏è‚É£ ‡πÅ‡∏≠‡∏î‡πÑ‡∏•‡∏ô‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏à‡πâ‡∏á‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô\n"
        "‚ö†Ô∏è *‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡∏ü‡∏£‡∏µ‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ú‡∏π‡πâ‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏ï‡∏≤‡∏°‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Ñ‡∏£‡∏ö‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô*"
    )
    
    keyboard = [
        [InlineKeyboardButton("üíÄ ZOMBIE XO", url="https://lin.ee/SgguCbJ"),
         InlineKeyboardButton("üëæ ZOMBIE PG", url="https://lin.ee/ETELgrN")],
        [InlineKeyboardButton("üëë ZOMBIE KING", url="https://lin.ee/fJilKIf"),
         InlineKeyboardButton("üßü ZOMBIE ALL", url="https://lin.ee/9eogsb8e")],
        [InlineKeyboardButton("üê¢ GENBU88", url="https://lin.ee/JCCXt06")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        confirm_message, 
        parse_mode="Markdown", 
        reply_markup=reply_markup
    )
    
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Cancel command handler"""
    await update.message.reply_text("‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô‡πÅ‡∏•‡πâ‡∏ß")
    return ConversationHandler.END

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle errors"""
    print(f"‚ùå Error: {context.error}")
    if update and update.effective_message:
        await update.effective_message.reply_text(
            "‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á\n"
            "‡∏´‡∏≤‡∏Å‡∏¢‡∏±‡∏á‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô"
        )

async def clear_webhook():
    """Clear webhook before starting"""
    bot = Bot(token=BOT_TOKEN)
    try:
        webhook_info = await bot.get_webhook_info()
        if webhook_info.url:
            print(f"üîó ‡∏û‡∏ö Webhook ‡πÄ‡∏Å‡πà‡∏≤: {webhook_info.url}")
            await bot.delete_webhook(drop_pending_updates=True)
            print("‚úÖ ‡∏•‡∏ö webhook ‡πÄ‡∏Å‡πà‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")
        else:
            print("‚úÖ ‡πÑ‡∏°‡πà‡∏û‡∏ö webhook ‡πÄ‡∏Å‡πà‡∏≤")
    except Exception as e:
        print(f"‚ö†Ô∏è Error clearing webhook: {e}")
    finally:
        await bot.close()

# ====== Main Function ======
def main():
    """Main function to run the bot"""
    print("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏ö‡∏≠‡∏ó...")
    print(f"üîë Bot Token: {BOT_TOKEN[:20]}...")
    print(f"üìä Google Sheet: ‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡∏ü‡∏£‡∏µ ‡∏Å‡∏•‡∏∏‡πà‡∏° ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏° ZOMBIE")
    print(f"üåê Environment: {'Render' if os.getenv('RENDER') else 'Local'}")
    
    # Clear webhook first
    print("\nüîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå webhook ‡πÄ‡∏Å‡πà‡∏≤...")
    asyncio.run(clear_webhook())
    
    # Build application
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    
    # Add conversation handler
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            ASK_INFO: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_info)]
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )
    
    app.add_handler(conv_handler)
    app.add_error_handler(error_handler)
    
    # Check if running on Render
    if os.getenv("RENDER"):
        # Render mode - use webhook
        print("\nüåê ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏±‡∏ô‡∏ö‡∏ô Render (Webhook mode)")
        PORT = int(os.environ.get("PORT", 10000))
        RENDER_EXTERNAL_URL = os.environ.get("RENDER_EXTERNAL_URL")
        
        if not RENDER_EXTERNAL_URL:
            print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö RENDER_EXTERNAL_URL")
            sys.exit(1)
        
        webhook_url = f"{RENDER_EXTERNAL_URL}/{BOT_TOKEN}"
        print(f"üîó Webhook URL: {webhook_url}")
        
        # Start webhook
        app.run_webhook(
            listen="0.0.0.0",
            port=PORT,
            webhook_url=webhook_url,
            drop_pending_updates=True
        )
    else:
        # Local mode - use polling
        print("\nüíª ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏±‡∏ô‡∏ö‡∏ô Local (Polling mode)")
        print("‚úÖ ‡∏ö‡∏≠‡∏ó‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß! ‡∏Å‡∏î Ctrl+C ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏¢‡∏∏‡∏î\n")
        
        # Start polling
        app.run_polling(
            allowed_updates=Update.ALL_TYPES,
            drop_pending_updates=True
        )

if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        print("\n\nüëã ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏ö‡∏≠‡∏ó")
    except Exception as e:
        print(f"\n‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
        sys.exit(1)